extends ../layout

block content
    .content-wrapper
        .row
            .col-lg-6
                img(src=product.imageUrl alt=product.model style='width: 100%;')
            .col-lg-6
                .card
                    .card-body
                        h5.card-title Име
                        p.card-text= product.model
                        h5.card-title Материал
                        p.card-text= product.material
                        h5.card-title Дължина
                        p.card-text= product.length
                        h5.card-title ID
                        p.card-text= product.id
                        h5.card-title Цена
                        p.card-text= `${product.price.toFixed(2)} лв`
                        .button-container
                            if user
                                if isFavorite
                                    button.btn.btn-outline-primary.btn-product-detail(onclick=`toggleFavorite(${product.id}, this)`) Премахни от любими
                                else
                                    button.btn.btn-primary.btn-product-detail(onclick=`toggleFavorite(${product.id}, this)`) Добави в любими
                                if user.role == 'admin'
                                    a.btn.btn-warning.btn-product-detail(href='/products/' + product.id + '/edit') Промени
                            a.btn.btn-secondary.btn-product-detail(href='/products') Назад
                            // Add to Cart Button
                            button.btn.btn-success.btn-product-detail(onclick=`addToCart(${product.id}, "${product.model}", ${product.price}, "${product.imageUrl || ''}")`) Добави в количка

    // Toast Container
    #toast

    script.
        async function toggleFavorite(productId, button) {
            try {
                const response = await fetch(`/products/${productId}/add-favorite`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.text();

                if (response.ok) {
                    const resultLowerCase = result.trim().toLowerCase();

                    if (resultLowerCase === "added") {
                        button.className = "btn btn-outline-primary btn-product-detail";
                        button.innerHTML = "Премахни от любими";
                        showToast('success', 'Продуктът е добавен в любими!');
                    } else if (resultLowerCase === "removed") {
                        button.className = "btn btn-primary btn-product-detail";
                        button.innerHTML = "Добави в любими";
                        showToast('info', 'Продуктът е премахнат от любими!');
                    } else {
                    showToast('error', 'Непознат отговор от сървъра.');
                    }
                } else {
                    showToast('error', 'Грешка при обработката на заявката.');
                }
            } catch (error) {
                console.error(error);
                showToast('error', 'Грешка при обработката на заявката.');
            }
        }

        function addToCart(productId, productName, price, imageUrl) {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            const existingProduct = cart.find(item => item.productId === productId);

            if (existingProduct) {
            existingProduct.quantity += 1;
            } else {
                cart.push({ 
                productId, 
                productName, 
                price, 
                imageUrl: imageUrl || '/images/default-product.png', // Fallback image
                quantity: 1 
                });
            }

            sessionStorage.setItem('cart', JSON.stringify(cart));
            updateCartCount();
            showToast('success', `${productName} е добавен в количката.`);
        }       

        function updateCartCount() {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            const cartCount = cart.reduce((total, item) => total + item.quantity, 0);
            document.getElementById('cart-count').textContent = cartCount;
        }

        document.addEventListener('DOMContentLoaded', updateCartCount);

        function showToast(type, message) {
            const toastContainer = document.getElementById('toast');
            const toast = document.createElement('div');
            toast.className = `toast ${type} show`;

            toast.innerHTML = `
                <div class="column">
                    <i class="${getIconClass(type)}"></i>
                    <span>${message}</span>
                </div>
                <i class="close fas fa-times" onclick="this.parentElement.remove()"></i>
            `;

            toastContainer.appendChild(toast);

            // Remove toast after 5 seconds
            setTimeout(() => {
                if (toast) toast.remove();
            }, 5000);
        }

        function getIconClass(type) {
            switch (type) {
                case 'success': return 'fas fa-check-circle';
                case 'error': return 'fas fa-exclamation-circle';
                case 'info': return 'fas fa-info-circle';
                case 'warning': return 'fas fa-exclamation-triangle';
                default: return 'fas fa-bell';
            }
        }
